Script started on 2023-06-07 02:07:29+03:00 [TERM="xterm-256color" TTY="/dev/pts/2" COLUMNS="80" LINES="16"]
[?2004h]0;bulat@bulat-Swift-SF314-58: ~/Studying/prprm/cr/VIII[01;32mbulat@bulat-Swift-SF314-58[00m:[01;34m~/Studying/prprm/cr/VIII[00m$ ca[K[Kls
[?2004llist.c  list.h  [0m[01;34mlogs[0m  main.c  makefile  [01;34mtex[0m
[?2004h]0;bulat@bulat-Swift-SF314-58: ~/Studying/prprm/cr/VIII[01;32mbulat@bulat-Swift-SF314-58[00m:[01;34m~/Studying/prprm/cr/VIII[00m$ cat makefile 
[?2004lCC = gcc
CFLAGS = -std=c99 -Wall -Wextra

main: main.o list.o
	$(CC) $(CFLAGS) -o main main.o list.o
main_o:
	$(CC) $(CFLAGS) -c main.c
deque_o:
	$(CC) $(CFLAGS) -c list.c
clean:
	rm -f *.o main
[?2004h]0;bulat@bulat-Swift-SF314-58: ~/Studying/prprm/cr/VIII[01;32mbulat@bulat-Swift-SF314-58[00m:[01;34m~/Studying/prprm/cr/VIII[00m$ cat list.g[Kh
[?2004l#ifndef _LIST_H
#define _LIST_H

#include <stdbool.h>
#include <inttypes.h>
#include <stdlib.h>
#include <stdio.h>

typedef uint64_t size_t;

typedef struct {
    char* p;
    size_t l;
} string;

string make_string(char*);
bool strings_eq(string, string);

typedef struct node {
    struct node* r;
    string s;
} node;

node* make_node(string);

void link_node(node*, node*, node*);

void link_nodes(node*, node*);

void node_free(node*);

typedef struct {
    node* begin;
    node* back;
    size_t size;
} list;

void list_create_empty(list*);

void list_add(list*, string, size_t);

node* list_find_node(list*, string);

void list_remove(list*, string);

void list_remove_subtree(list*, node*, node*);

void list_free(list*);

size_t list_len(node*, node*);

void list_print(list*);

void list_cut(list*, char, string);


#endif[?2004h]0;bulat@bulat-Swift-SF314-58: ~/Studying/prprm/cr/VIII[01;32mbulat@bulat-Swift-SF314-58[00m:[01;34m~/Studying/prprm/cr/VIII[00m$ cat list.c
[?2004l#include "list.h"

string make_string(char* p) {
    string s;
    s.p = p;
    s.l = 0;
    while (s.p[s.l] != '\0') {
        ++s.l;
    }
    return s;
}

bool string_eq(string a, string b) {
    if (a.l != b.l) {
        return false;
    }
    size_t i = 0;
    while (i < a.l) {
        if (a.p[i] != b.p[i]) {
            return false;
        }
        ++i;
    }
    return true;
}

node* make_node(string s) {
    node* p = (node*)malloc(sizeof(node));
    p->r = NULL;
    p->s = s;
    return p;
}

void link_node(node* l, node* m, node* r) {
    if (! (l == NULL))
        l->r = m;
    m->r = r;
}

void link_nodes(node* l, node* r) {
    if (! (l == NULL)) {
        l->r = r;
    }
}

void node_free(node* p) {
    free(p->s.p);
    p->s.p = NULL;
    p->s.l = 0;
    p->r = NULL;
}

void list_create_empty(list* l) {
    l->begin = l->back = NULL;
    l->size = 0;
}

void list_add(list* l, string s, size_t index) {
    node* _p = make_node(s);
    if (index < l->size) {
        node* p = l->begin;
        for (size_t i = 0; i < index; ++i) {
            p = p->r;
        }
        link_node(p, _p, p->r);
    } else {
        if (l->back == NULL) {
            l->begin = l->back = _p;
            l->size = 0;
        } else {
            link_node(l->back, _p, NULL);
            l->back = _p;
        }
    }
    l->size++;
}

node* list_find_node(list* l, string s) {
    node* p = l->begin;
    while (! (p == NULL) && ! string_eq(p->s, s)) {
        p = p->r;
    }
    return p;
}

void list_remove(list* l, string s) {
    if (! (l->begin == NULL) && string_eq(l->begin->s, s)) {
        node* r = l->begin;
        l->begin = l->begin->r;
        if (l->begin == NULL) {
            l->back = NULL;
        } else {
            link_nodes(l->begin, l->begin->r->r);
        }
        node_free(r);
        l->size--;
    }
    else {
        node* p = l->begin;
        while (!(p->r == NULL) && ! string_eq(p->r->s, s)) {
            p = p->r;
        }
        if (! (p->r == NULL)) {
            node* r = p->r;
            link_nodes(p, p->r->r);
            node_free(r);
            l->size--;
        }
    }
}

void list_remove_subtree(list* l, node* s, node* e) {
    node* p = l->begin,* r;
    if (p != s) {
        while (! (p->r == NULL) && ! (p->r == s)) {
            p = p->r;
        }
        if (p->r == NULL) {
            return;
        }
        if (e == NULL) {
            l->back = p;
        }
        r = p->r;
        p->r = e;
        p = r;
    } else {
        l->begin = e;
    }
    while (! (p->r == NULL) && ! (p->r == e)) {
        r = p;
        p = p->r;
        node_free(r);
        --l->size;
    }
    node_free(p);
    --l->size;
}

void list_free(list* l) {
    if (l->begin == NULL) {
        l->back = NULL;
        l->size = 0;
        return;
    }
    node* p = l->begin,* r;
    while (! (p->r == NULL)) {
        r = p;
        p = p->r;
        node_free(r);
    }
    node_free(p);
    l->begin = l->back = NULL;
    l->size = 0;
}

size_t list_len(node* l, node* r) {
    if (l == NULL || r == NULL) {
        return 0;
    }
    node* p = l;
    size_t len = 1;
    while (! (p == r)) {
        p = p->r; ++len;
    }
    return len;
}

void list_print(list* l) {
    printf("{");
    if (! (l->begin == NULL)) {
        node* p = l->begin;
        while (! (p->r == NULL)) {
            printf(" %s,", p->s.p);
            p = p->r;
        }
        printf(" %s ", p->s.p);
    }
    printf("}");
}

void list_cut(list* l, char side, string s) {
    node* p = list_find_node(l, s);
    if (p == NULL) {
        return;
    }
    if (side == 'l' && ! (p == l->begin)) {
        list_remove_subtree(l, l->begin, p);
    } else if (side == 'r' && ! (p->r == NULL)) {
        list_remove_subtree(l, p->r, NULL);
    }
}[?2004h]0;bulat@bulat-Swift-SF314-58: ~/Studying/prprm/cr/VIII[01;32mbulat@bulat-Swift-SF314-58[00m:[01;34m~/Studying/prprm/cr/VIII[00m$ cat main.c 
[?2004l#include <stdio.h>
#include <inttypes.h>

#include "list.h"

#define STRING_LENGTH 32

char* int64_t_to_str(int64_t x) {
    char* p;
    if (x == 0) {
        p = (char*)malloc(sizeof(char) * 2);
        p[0] = '0';
        p[1] = '\0';
    }
    else {
        int64_t _x = x;
        size_t l = 0;
        while (_x != 0) {
            _x /= 10;
            ++l;
        }
        if (x < 0) {
            p = (char*)malloc(sizeof(char) * (l + 2));
            p[0] = '-';
            ++l;
            x = -x;
        } else {
            p = (char*)malloc(sizeof(char) * (l + 1));
        }
        p[l] = '\0';
        while (x != 0) {
            p[--l] = (char)((x % 10) + 48);
            x /= 10;
        }
    }
    
    return p;
}

int main() {

    list l;
    
    list_create_empty(&l);

    int32_t command = 0;
    bool running = true;

    char* s;
    size_t size;


    while (running) {
        printf("Menu:\n0. Exit\n1. Add element to the list\n2. Remove element from the list\n3. Cut sides.\n4. Print list\n5. Print list length\n");
        printf("Please, input command: ");
        scanf(" %d", &command);

        switch (command)
        {
        case 1:
            s = (char*)calloc(STRING_LENGTH, sizeof(char));
            printf("Input string to be added: ");
            size = scanf(" %s[^\n]", s);
            printf("hui\n");
            list_add(&l, (string){.l = size, .p = s}, l.size);
            break;
        case 2:
            s = (char*)calloc(STRING_LENGTH, sizeof(char));
            printf("Input string that is to be removed from the list: ");
            size = scanf(" %s[^\n]", s);
            list_remove(&l, (string){.l = size, .p = s});
            break;
        case 3:
            s = (char*)calloc(STRING_LENGTH, sizeof(char));
            printf("Input central element: ");
            size = scanf(" %s[^\n]", s);
            printf("Which side you wish to be cut? [l, r]: ");
            char side;
            scanf(" %c[^\n]", &side);
            if (! (side == 'l' || side == 'r')) {
                printf("Wrong side picked: %c\n", side);
            } else {
                list_cut(&l, side, (string){.l = size, .p = s});
            }
            break;
        case 4:
            list_print(&l);
            printf("\n");
            break;
        case 5:
            printf("List length: %ld\n", l.size);
            break;
        case 0:
            running = false;
            break;
        default:
            printf("Wrong command picked\n");
            break;
        }
    }

    list_free(&l);

    return 0;
}[?2004h]0;bulat@bulat-Swift-SF314-58: ~/Studying/prprm/cr/VIII[01;32mbulat@bulat-Swift-SF314-58[00m:[01;34m~/Studying/prprm/cr/VIII[00m$ make
[?2004lgcc -std=c99 -Wall -Wextra   -c -o main.o main.c
gcc -std=c99 -Wall -Wextra   -c -o list.o list.c
gcc -std=c99 -Wall -Wextra -o main main.o list.o
[?2004h]0;bulat@bulat-Swift-SF314-58: ~/Studying/prprm/cr/VIII[01;32mbulat@bulat-Swift-SF314-58[00m:[01;34m~/Studying/prprm/cr/VIII[00m$ ./main 
[?2004lMenu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 1
Input string to be added: aboba
hui
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 1
Input string to be added: bobaba
hui
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 1
Input string to be added: bobiba
hui
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 1
Input string to be added: iuiuio o
hui
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 1
Input string to be added: uauaua
hui
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 4
{ aboba, bobaba, bobiba, iuiuio, uauaua }
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 2
Input string that is to be removed from the list: bobiba
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 4
{ aboba, bobiba, iuiuio, uauaua }
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 5
List length: 4
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 3
Input central element: bobiba
Which side you wish to be cut? [l, r]: r
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 4
{ aboba, bobiba }
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 3
Input central element: bobiba
Which side you wish to be cut? [l, r]: l
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 4
{ bobiba }
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 2
Input string that is to be removed from the list: bobiba
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 4
{}
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 5
List length: 0
Menu:
0. Exit
1. Add element to the list
2. Remove element from the list
3. Cut sides.
4. Print list
5. Print list length
Please, input command: 0
[?2004h]0;bulat@bulat-Swift-SF314-58: ~/Studying/prprm/cr/VIII[01;32mbulat@bulat-Swift-SF314-58[00m:[01;34m~/Studying/prprm/cr/VIII[00m$ exit
[?2004lexit

Script done on 2023-06-07 02:08:48+03:00 [COMMAND_EXIT_CODE="0"]
